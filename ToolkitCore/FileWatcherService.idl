#pragma once
#include <string>
#include <string_view>
#include "FileChange.idl" // Added import to resolve FileChange type

namespace ToolkitCore
{
    /// <summary>
    /// Delegate that defines the signature for handling file system change events.
    /// Invoked when monitored files or directories change.
    /// </summary>
    /// <param name="sender">The FileWatcherService instance that detected the change</param>
    /// <param name="change">A FileChange object containing details about what changed</param>
    /// <remarks>
    /// Event handlers should be lightweight and avoid blocking operations.
    /// </remarks>
    delegate void FileWatcherChangedHandler(FileWatcherService sender, FileChange change);

    /// <summary>
    /// Windows Runtime component that provides file system monitoring capabilities.
    /// Watches folders for changes and raises events through delegate pattern.
    /// </summary>
    /// <remarks>
    /// WinRT interface contract:
    /// - [default_interface] designates primary interface for runtime activation
    /// - Exposes Start/Stop methods for monitoring control
    /// - Provides Changed event for file system notifications
    /// - Compatible with WinRT activation and projection patterns
    /// </remarks>
    [default_interface]
    runtimeclass FileWatcherService
    {
        /// <summary>
        /// Default constructor required for WinRT activation factory support.
        /// </summary>
        FileWatcherService();

        /// <summary>
        /// Begins monitoring the specified folder for file system changes.
        /// </summary>
        /// <param name="folder">Full path to the folder to monitor</param>
        void Start(String folder);

        /// <summary>
        /// Stops monitoring and releases associated resources.
        /// </summary>
        void Stop();

        /// <summary>
        /// Event raised when file system changes are detected in the monitored folder.
        /// </summary>
        event FileWatcherChangedHandler Changed;
    };
}
