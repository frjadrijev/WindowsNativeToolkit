#pragma once
#include <string>
#include <string_view>
#include "FileChange.idl" // Added import to resolve FileChange type

namespace ToolkitCore
{
    /// <summary>
    /// Delegate that defines the signature for handling file system change events.
    /// This delegate is invoked whenever a monitored file or directory is modified,
    /// created, or deleted within the watched folder.
    /// </summary>
    /// <param name="sender">The FileWatcherService instance that detected the change</param>
    /// <param name="change">A FileChange object containing details about what changed</param>
    /// <remarks>
    /// Event handlers using this delegate should be lightweight and avoid blocking
    /// operations, as they are called on the file system monitoring thread.
    /// For heavy processing, consider marshaling the work to a background thread.
    /// </remarks>
    delegate void FileWatcherChangedHandler(FileWatcherService sender, FileChange change);

    /// <summary>
    /// A Windows Runtime component that provides file system monitoring capabilities.
    /// This service watches a specified folder for changes and raises events when files
    /// or directories are created, modified, or deleted.
    /// </summary>
    /// <remarks>
    /// The FileWatcherService uses the Windows ReadDirectoryChangesW API internally
    /// to provide efficient, asynchronous file system monitoring. It supports monitoring
    /// of subdirectories and provides detailed change information including timestamps
    /// and change types.
    /// 
    /// Usage pattern:
    /// 1. Create an instance of FileWatcherService
    /// 2. Subscribe to the Changed event
    /// 3. Call Start() with the folder path to monitor
    /// 4. Handle change events as they occur
    /// 5. Call Stop() when monitoring is no longer needed
    /// 
    /// Performance considerations:
    /// - Monitoring large directory trees may impact performance
    /// - Event frequency depends on file system activity
    /// - Consider filtering events based on your application's needs
    /// </remarks>
    [default_interface]
    runtimeclass FileWatcherService
    {
        /// <summary>
        /// Initializes a new instance of the FileWatcherService.
        /// The service starts in a stopped state and requires a call to Start()
        /// to begin monitoring file system changes.
        /// </summary>
        FileWatcherService();

        /// <summary>
        /// Begins monitoring the specified folder for file system changes.
        /// This method starts an asynchronous monitoring operation that will
        /// continue until Stop() is called or the service is disposed.
        /// </summary>
        /// <param name="folder">
        /// The full path to the folder to monitor. Must be an existing directory
        /// that the application has read access to. Subdirectories are included
        /// in the monitoring scope.
        /// </param>
        /// <exception cref="System.ArgumentException">
        /// Thrown when the folder parameter is null, empty, or contains invalid characters.
        /// </exception>
        /// <exception cref="System.IO.DirectoryNotFoundException">
        /// Thrown when the specified folder does not exist.
        /// </exception>
        /// <exception cref="System.UnauthorizedAccessException">
        /// Thrown when the application lacks sufficient permissions to monitor the folder.
        /// </exception>
        /// <exception cref="System.InvalidOperationException">
        /// Thrown when the service is already monitoring a folder. Call Stop() first
        /// before monitoring a different folder.
        /// </exception>
        /// <remarks>
        /// The monitoring includes the following change types:
        /// - File and directory creation
        /// - File and directory deletion
        /// - File content modifications
        /// - File and directory renames
        /// - Attribute changes
        /// 
        /// Network drives and removable media are supported but may have
        /// different performance characteristics or reliability.
        /// </remarks>
        void Start(String folder);

        /// <summary>
        /// Stops monitoring the currently watched folder and releases associated resources.
        /// This method is safe to call multiple times and will have no effect if
        /// monitoring is not currently active.
        /// </summary>
        /// <remarks>
        /// After calling Stop(), no further change events will be raised until
        /// Start() is called again. Any pending events in the queue may still
        /// be delivered briefly after Stop() returns.
        /// 
        /// This method blocks until the monitoring thread has been cleanly shut down,
        /// ensuring that no events will be raised after the method returns.
        /// </remarks>
        void Stop();

        /// <summary>
        /// Event raised when a file system change is detected in the monitored folder.
        /// Subscribe to this event to receive notifications about file and directory
        /// changes within the watched location.
        /// </summary>
        /// <remarks>
        /// Event characteristics:
        /// - Events are raised on a background thread, not the UI thread
        /// - Multiple events may be raised for a single file operation
        /// - Events include detailed information about the type of change and timestamp
        /// - Event handlers should complete quickly to avoid blocking the monitoring thread
        /// 
        /// Common scenarios that trigger events:
        /// - Creating, deleting, or renaming files and folders
        /// - Modifying file content or attributes
        /// - Moving files into or out of the monitored directory tree
        /// 
        /// Note: Some operations (like file moves) may generate multiple events
        /// (delete from old location, create in new location).
        /// </remarks>
        event FileWatcherChangedHandler Changed;
    };
}
